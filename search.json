[
  
    {
      "title"    : "PowerCLI - Getting distributed port groups from a dvSwitch",
      "category" : "",
      "tags"     : "powershell, powercli, esxi, vmware, dvswitch",
      "url"      : "/posts/powercli-get-distributedportgroups-from-dvswitch",
      "date"     : "2015-05-28 22:49:46 +0100",
      "content"  : "A small segment of PowerCLI that helps you to retrieve distributed virtual portgroups from a distributed virtual switch.get-vmhost -Name &lt;hostname&gt; | Get-VirtualPortGroup | sort Name | Select Name, @{N="VLANId";E={$_.Extensiondata.Config.DefaultPortCOnfig.Vlan.VlanId}}"
    } ,
  
    {
      "title"    : "Running &#39;jekyll serve --detach&#39; in the background without console output",
      "category" : "",
      "tags"     : "jekyll",
      "url"      : "/posts/getting-jekyll-to-watch-when-detached",
      "date"     : "2015-05-13 23:03:46 +0100",
      "content"  : "In order for Jekyll to serve up the pages you create you need to run its server component.The usual way to do this is by running the following at the command line;jekyll serveIn Jekyll 2.5.x this will run the web server and a watcher by default. The watcher checks for changes that are being made on the fly and continues to serve.  The above command is run on the presumption that your source, destination and ports settings exist in the _config.yml file at the root of your siteThis process will not run in the background. Not ideal if you either want to log off the terminal or edit the blog at the terminal with vi or nano or whatever.So Jekyll provides a way to detach the Jekyll serve process from the terminaljekyll serve --detachOn the surface this works great, but output from Jekyll is displayed when viewing files within a terminal editor, such as vi or nano.When I first started out hacking this blog together I performed most tasks at the terminal and so needed to be able to run Jekyll in the background without distraction. I tried the following;jekyll serve --detach &amp; Even though the process went to the background, I as still seeing output coming from the Jekyll serve process. This was pretty frustrating when editing files with vi.So the next step was to set up some redirection thus getting rid of the distracting Jekyll process output.Here is the command line including redirection;jekyll serve &gt; /dev/null 2&gt;&amp;1 &amp;  2&gt; redirects stderr to an (unspecified) file, appending &amp;1 redirects stderr to stdout with the &amp; sending the process into the background.This command also allows me to disconnect from the session and keep the Jekyll server/watcher running.It’s a shame that there is no way (that I can find) to run Jekyll, detached without the output.There are other ways to skin this cat, you could install ‘screen’ and run the process in that, but its more faffy.Maybe Ruby offers a way to run processes in the background like ‘forever’ does for Node?Answers on a postcard…"
    } ,
  
    {
      "title"    : "PowerCLI - Getting and setting round-robin pathing policies",
      "category" : "",
      "tags"     : "powershell, powercli, esxi, vmware",
      "url"      : "/posts/powercli-getting-and-setting-round-robin-pathing-policies",
      "date"     : "2015-04-29 22:45:46 +0100",
      "content"  : "The following functions can be used to retrieve (Get-RoundRobin) whether particular LUN IDs are using a Round Robin pathing policy.  You can then set (Set-RoundRobin) a round robin pathing policy on the LUN IDs if your storage processor supports it.Round Robin Pathing Policies from the VMware site  Round Robin (RR): Uses an automatic path selection rotating through all available paths, enabling the distribution of load across the configured paths.	For Active/Passive storage arrays, only the paths to the active controller will be used in the Round Robin policy.	For Active/Active storage arrays, all paths will be used in the Round Robin policy.To run the scripts you will need your Vendor LUN ID or Device Display Name.A LUN ID looks a bit like this:  naa.123456789…..To retrieve a list of LUN IDs run the following command from an ESXi host;esxcli storage nmp device listNote the Device Display Name for your vendor includes a naa.xxxxxxxx ID. Record the first 12 numbers after ‘naa’ as we will use this in the scripts.Get-RoundRobinFunction Get-RoundRobin() {  		$vcenter=Read-Host &quot;Enter a vCenter&quot;		Connect-vCenter $vcenter		Write-Host &quot;Connecting to $vcenter ...&quot;		Write-Host &quot;Getting clusters available for $vcenter&quot;		Get-Cluster | Select-Object -Property Name | ft -HideTableHeaders		$cluster=Read-Host &quot;Enter a cluster name&quot;		Write-host &quot;Finding &lt;VENDOR_NAME&gt; LUNs (naa.&lt;VENDOR_ID_PATTERN&gt;*) on hosts within cluster $cluster without a round robin pathing policy ... You may twiddle thumbs now.&quot;		Get-VMHost -Location $cluster | Get-ScsiLun -CanonicalName &quot;naa.&lt;VENDOR_ID_PATTERN&gt;*&quot; | Select-Object -Property CanonicalName | where {$_.MultipathPolicy -ne &quot;RoundRobin&quot;} | measure-object -line		Write-Host &quot;Completed&quot;	}Set-RoundRobinFunction Set-RoundRobin() {		$vcenter=Read-Host &quot;Enter a vCenter&quot;		Connect-vCenter $vcenter		Write-Host &quot;Connecting to $vcenter ...&quot;		Write-Host &quot;Getting clusters available for $vcenter&quot;		Get-Cluster | Select-Object -Property Name | ft -HideTableHeaders		$cluster=Read-Host &quot;Enter a cluster name&quot;		Write-host &quot;Finding &lt;VENDOR_NAME&gt; LUNs (naa.&lt;VENDOR_ID_PATTERN&gt;*) on hosts within cluster $cluster without RR pathing policy and setting to round robin ... You may twiddle thumbs now.&quot;		Get-VMHost -Location $cluster | Get-ScsiLun -CanonicalName &quot;naa.naa.&lt;VENDOR_ID_PATTERN&gt;*&lt;VENDOR_ID_PATTERN&gt;*&quot; | Where {$_.MultipathPolicy -ne &quot;RoundRobin&quot;} | Set-ScsiLun -MultipathPolicy RoundRobin		Write-Host &quot;Completed&quot;		Write-host &quot;Finding LUNs without RR pathing policy&quot;		Get-VMHost -Location $cluster | Get-ScsiLun -CanonicalName &quot;naa.&lt;VENDOR_ID_PATTERN&gt;*&quot; | Where {$_.MultipathPolicy -ne &quot;RoundRobin&quot;}		Write-Host &quot;Completed&quot;	}Connect-vCenterFunction Connect-vCenter {	Param(        	[string]$vcenter	)        	# GET VSPHERE VCENTER CREDENTIALS	        $creds=Get-Credential -Credential &quot;&lt;DOMAIN_CREDENTIALS&gt;&quot;        	Connect-VIServer -Server $vcenter -Protocol https -Credential $creds -warningaction SilentlyContinue	}As a bonus, you can also set the IOPS to 1 on the PSP (Path Selection Policy).Here is a ESXi command line one liner to GET the current iops set on a Round Robin PSPfor i in `ls /vmfs/devices/disks | grep naa.&lt;VENDOR_ID_PATTERN&gt;|grep -v :`;do esxcli storage nmp psp roundrobin deviceconfig get --device=$i; doneHere is an ESXi command line one liner to SET the iops to 1 from the default of 1000 (check with your vendor before doing this) on a Round Robin PSPfor i in `ls /vmfs/devices/disks | grep naa.&lt;VENDOR_ID_PATTERN&gt;` ; do esxcli storage nmp psp roundrobin deviceconfig set --device=$i --iops=1 --type=iops; done"
    } ,
  
    {
      "title"    : "PowerCLI - Creating local users and groups on ESXi 5.5",
      "category" : "",
      "tags"     : "powershell, powercli, esxi, vmware",
      "url"      : "/posts/powercli-creating-local-users-and-groups-on-esxi-55",
      "date"     : "2015-04-29 22:45:46 +0100",
      "content"  : "The following function creates a user and role that allows the power up of VMs on a host. I use this account when vCenter is out of action and I need to run other functions to locate user VMs and power them up on particular hosts.This function requires that you have the root password to the ESXi host.Write-LocalHostUser	Function Write-LocalHostUser() {	[CmdletBinding()]	Param(		[string]$hostname	)	$creds=Get-Credential -Credential "root"	$hostname=$hostname + "&lt;FQDN&gt;"	$hostname	Connect-VIServer -Server $hostname -Protocol https -Credential $creds	New-VMHostAccount -Id "&lt;username&gt;" -Password "&lt;password&gt;" -Description "Account to be used to power up VMs in the event there is no vCenter."	New-VIRole -Name "VM Power On Only" -Privilege “Power On”	Set-VIRole -Role "VM Power On Only" -AddPrivilege "Assign network"	New-VIPermission -Entity $hostname -Principal "powerup" -Role “VM Power On Only” -Propagate:$true	}"
    } 
  
]